generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  companyId String?
  tasks     Task[]
  company   Company?  @relation(fields: [companyId], references: [id])
  meetings  Meeting[] @relation("MeetingUsers")
  roles     Role[]    @relation("UserRoles")
}

model Company {
  id        String     @id @default(uuid())
  name      String
  phone     String
  address   Address?
  customers Customer[]
  suppliers Supplier[]
  projects  Project[]
  roles     Role[]
  users     User[]
}

model Role {
  id        String   @id @default(uuid())
  name      String
  companyId String?
  Company   Company? @relation(fields: [companyId], references: [id])
  users     User[]   @relation("UserRoles")
}

model Address {
  id        String  @id @default(uuid())
  street    String
  city      String
  state     String
  zip       String
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id])
}

model Project {
  id         String    @id @default(uuid())
  name       String
  companyId  String?
  start_date DateTime
  end_date   DateTime
  active     Boolean
  creatorId  String
  meetings   Meeting[]
  company    Company?  @relation(fields: [companyId], references: [id])
  tasks      Task[]
}

model Task {
  id         String   @id @default(uuid())
  name       String
  projectId  String?
  assigneeId String?
  creatorId  String
  start_date DateTime
  end_date   DateTime
  active     Boolean
  status     String   @default("OPEN")
  project    Project? @relation(fields: [projectId], references: [id])
  assignee   User?    @relation(fields: [assigneeId], references: [id])
}

model Meeting {
  id         String   @id @default(uuid())
  name       String
  projectId  String?
  creatorId  String
  start_date DateTime
  project    Project? @relation(fields: [projectId], references: [id])
  users      User[]   @relation("MeetingUsers")
}

model Customer {
  id                 String   @id @default(uuid())
  name               String
  phone              String
  email              String
  type               String
  fiscalCode         String
  registrationDate   DateTime
  creditLimit        Float
  paymentTerms       String
  purchaseHistory    String
  contactInformation String
  classification     String
  status             Boolean
  references         String
  geographicLocation String
  preferences        String
  supportHistory     String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  companyId          String
  company            Company  @relation(fields: [companyId], references: [id])
}

model Supplier {
  id                           String    @id @default(uuid())
  companyName                  String
  contactPerson                String
  contactTitle                 String
  contactEmail                 String
  contactPhone                 String
  address                      String
  country                      String
  paymentTerms                 String
  leadTime                     String
  minimumOrderQuantity         String
  preferredCommunicationMethod String
  supplierRating               String
  supplierCategory             String
  certifications               String
  contractExpiryDate           DateTime
  bankingInformation           String
  taxIdentificationNumber      String
  discounts                    String
  notesOrComments              String
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  companyId                    String
  company                      Company   @relation(fields: [companyId], references: [id])
  products                     Product[]
}

model Product {
  id                   String            @id @default(uuid())
  name                 String
  detailedDescription  String
  unitOfMeasure        String
  weight               String
  dimensions           String
  stock                String
  manufactureDate      DateTime
  expirationDate       DateTime
  purchase             String
  selling              String
  profit               String
  minimumOrderQuantity String
  minimumStockQuantity String
  maximumStockQuantity String
  replenishment        String
  categories           Categories[]
  salesHistory         SalesHistory[]
  commentsOrNotes      CommentsOrNotes[]
  supplierId           String
  supplier             Supplier          @relation(fields: [supplierId], references: [id])
}

model Categories {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model SalesHistory {
  id        String   @id @default(uuid())
  date      DateTime
  quantity  String
  price     String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model CommentsOrNotes {
  id        String   @id @default(uuid())
  date      DateTime
  comment   String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}
